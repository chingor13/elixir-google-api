# Copyright 2018 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule <%= namespace %>.Api.<%= api.name %> do
  @moduledoc """
  <%= api.description %>
  """

  alias <%= namespace %>.Connection
  alias GoogleApi.Gax.{Request, Response}

  <%= for endpoint <- api.endpoints do %>
  @doc """
  <%= endpoint.description %>

  ## Parameters

  - connection (GoogleApi.Books.V1.Connection): Connection to server
  <%= for parameter <- endpoint.required_parameters do %>- <%= parameter.variable_name %> (<%= parameter.type.typespec %>): <%= parameter.description %>
<% end %>  - optional_params (keyword()): [optional] Optional parameters
    <%= for parameter <- endpoint.optional_parameters do %>- :<%= parameter.name %> (<%= parameter.type.typespec %>): <%= parameter.description %>
<% end %>
  ## Returns

  {:ok, %<%= endpoint.return.struct %>{}} on success
  {:error, info} on failure
  """
  @spec <%= endpoint.typespec %>
  def <%= endpoint.name %>(connection, <%= for parameter <- endpoint.required_parameters do %><%= parameter.variable_name %>, <% end %>optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    <%= for parameter <- endpoint.optional_parameters do %>
      :"<%= parameter.name%>" => :"<%= parameter.location %>",
    <% end %>
    }

    request =
      Request.new()
      |> Request.method(:"<%= endpoint.method %>")
      |> Request.url("/<%= endpoint.path %>"<%= if endpoint.path_parameters do %>, %{<%= for parameter <- endpoint.path_parameters do %>
        "<%= parameter.name %>" => URI.encode(<%= parameter.variable_name %>, &URI.char_unreserved?/1),
      <% end %>}<% end %>)
      <%= for parameter <- endpoint.required_parameters do %><%= if parameter.location != "path" do %>
      |> Request.add_param(:"<%= parameter.location %>", :"<%= parameter.variable_name %>", <%= parameter.name %>)
      <% end %><% end %>
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %<%= endpoint.return.struct %>{}])
  end
  <% end %>
end
