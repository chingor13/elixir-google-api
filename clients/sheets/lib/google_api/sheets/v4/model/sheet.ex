# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Sheets.V4.Model.Sheet do
  @moduledoc """
  A sheet in a spreadsheet.

  ## Attributes

  - bandedRanges ([BandedRange]): The banded (i.e. alternating colors) ranges on this sheet. Defaults to: `null`.
  - basicFilter (BasicFilter): The filter on this sheet, if any. Defaults to: `null`.
  - charts ([EmbeddedChart]): The specifications of every chart on this sheet. Defaults to: `null`.
  - columnGroups ([DimensionGroup]): All column groups on this sheet, ordered by increasing range start index, then by group depth. Defaults to: `null`.
  - conditionalFormats ([ConditionalFormatRule]): The conditional format rules in this sheet. Defaults to: `null`.
  - data ([GridData]): Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing &#x60;Sheet1&#x60;, and the spreadsheet was requested with ranges &#x60;Sheet1!A1:C10&#x60; and &#x60;Sheet1!D15:E20&#x60;, then the first GridData will have a startRow/startColumn of &#x60;0&#x60;, while the second one will have &#x60;startRow 14&#x60; (zero-based row 15), and &#x60;startColumn 3&#x60; (zero-based column D). Defaults to: `null`.
  - developerMetadata ([DeveloperMetadata]): The developer metadata associated with a sheet. Defaults to: `null`.
  - filterViews ([FilterView]): The filter views in this sheet. Defaults to: `null`.
  - merges ([GridRange]): The ranges that are merged together. Defaults to: `null`.
  - properties (SheetProperties): The properties of the sheet. Defaults to: `null`.
  - protectedRanges ([ProtectedRange]): The protected ranges in this sheet. Defaults to: `null`.
  - rowGroups ([DimensionGroup]): All row groups on this sheet, ordered by increasing range start index, then by group depth. Defaults to: `null`.
  """

  @type t :: %__MODULE__{
          bandedRanges: list(GoogleApi.Sheets.V4.Model.BandedRange.t()),
          basicFilter: GoogleApi.Sheets.V4.Model.BasicFilter.t(),
          charts: list(GoogleApi.Sheets.V4.Model.EmbeddedChart.t()),
          columnGroups: list(GoogleApi.Sheets.V4.Model.DimensionGroup.t()),
          conditionalFormats: list(GoogleApi.Sheets.V4.Model.ConditionalFormatRule.t()),
          data: list(GoogleApi.Sheets.V4.Model.GridData.t()),
          developerMetadata: list(GoogleApi.Sheets.V4.Model.DeveloperMetadata.t()),
          filterViews: list(GoogleApi.Sheets.V4.Model.FilterView.t()),
          merges: list(GoogleApi.Sheets.V4.Model.GridRange.t()),
          properties: GoogleApi.Sheets.V4.Model.SheetProperties.t(),
          protectedRanges: list(GoogleApi.Sheets.V4.Model.ProtectedRange.t()),
          rowGroups: list(GoogleApi.Sheets.V4.Model.DimensionGroup.t())
        }

  defstruct [
    :bandedRanges,
    :basicFilter,
    :charts,
    :columnGroups,
    :conditionalFormats,
    :data,
    :developerMetadata,
    :filterViews,
    :merges,
    :properties,
    :protectedRanges,
    :rowGroups
  ]
end

defimpl Poison.Decoder, for: GoogleApi.Sheets.V4.Model.Sheet do
  import GoogleApi.Sheets.V4.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:bandedRanges, :list, GoogleApi.Sheets.V4.Model.BandedRange, options)
    |> deserialize(:basicFilter, :struct, GoogleApi.Sheets.V4.Model.BasicFilter, options)
    |> deserialize(:charts, :list, GoogleApi.Sheets.V4.Model.EmbeddedChart, options)
    |> deserialize(:columnGroups, :list, GoogleApi.Sheets.V4.Model.DimensionGroup, options)
    |> deserialize(
      :conditionalFormats,
      :list,
      GoogleApi.Sheets.V4.Model.ConditionalFormatRule,
      options
    )
    |> deserialize(:data, :list, GoogleApi.Sheets.V4.Model.GridData, options)
    |> deserialize(
      :developerMetadata,
      :list,
      GoogleApi.Sheets.V4.Model.DeveloperMetadata,
      options
    )
    |> deserialize(:filterViews, :list, GoogleApi.Sheets.V4.Model.FilterView, options)
    |> deserialize(:merges, :list, GoogleApi.Sheets.V4.Model.GridRange, options)
    |> deserialize(:properties, :struct, GoogleApi.Sheets.V4.Model.SheetProperties, options)
    |> deserialize(:protectedRanges, :list, GoogleApi.Sheets.V4.Model.ProtectedRange, options)
    |> deserialize(:rowGroups, :list, GoogleApi.Sheets.V4.Model.DimensionGroup, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Sheets.V4.Model.Sheet do
  def encode(value, options) do
    GoogleApi.Sheets.V4.Deserializer.serialize_non_nil(value, options)
  end
end
