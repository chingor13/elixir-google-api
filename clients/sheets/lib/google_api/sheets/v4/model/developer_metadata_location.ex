# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Sheets.V4.Model.DeveloperMetadataLocation do
  @moduledoc """
  A location where metadata may be associated in a spreadsheet.

  ## Attributes

  - dimensionRange (DimensionRange): Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns. Defaults to: `null`.
  - locationType (String.t): The type of location this object represents.  This field is read-only. Defaults to: `null`.
    - Enum - one of [DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED, ROW, COLUMN, SHEET, SPREADSHEET]
  - sheetId (integer()): The ID of the sheet when metadata is associated with an entire sheet. Defaults to: `null`.
  - spreadsheet (boolean()): True when metadata is associated with an entire spreadsheet. Defaults to: `null`.
  """

  @type t :: %__MODULE__{
          dimensionRange: GoogleApi.Sheets.V4.Model.DimensionRange.t(),
          locationType: any(),
          sheetId: any(),
          spreadsheet: any()
        }

  defstruct [
    :dimensionRange,
    :locationType,
    :sheetId,
    :spreadsheet
  ]
end

defimpl Poison.Decoder, for: GoogleApi.Sheets.V4.Model.DeveloperMetadataLocation do
  import GoogleApi.Sheets.V4.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:dimensionRange, :struct, GoogleApi.Sheets.V4.Model.DimensionRange, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Sheets.V4.Model.DeveloperMetadataLocation do
  def encode(value, options) do
    GoogleApi.Sheets.V4.Deserializer.serialize_non_nil(value, options)
  end
end
