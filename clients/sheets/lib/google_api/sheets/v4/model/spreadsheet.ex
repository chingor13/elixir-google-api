# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Sheets.V4.Model.Spreadsheet do
  @moduledoc """
  Resource that represents a spreadsheet.

  ## Attributes

  - developerMetadata ([DeveloperMetadata]): The developer metadata associated with a spreadsheet. Defaults to: `null`.
  - namedRanges ([NamedRange]): The named ranges defined in a spreadsheet. Defaults to: `null`.
  - properties (SpreadsheetProperties): Overall properties of a spreadsheet. Defaults to: `null`.
  - sheets ([Sheet]): The sheets that are part of a spreadsheet. Defaults to: `null`.
  - spreadsheetId (String.t): The ID of the spreadsheet. This field is read-only. Defaults to: `null`.
  - spreadsheetUrl (String.t): The url of the spreadsheet. This field is read-only. Defaults to: `null`.
  """

  @type t :: %__MODULE__{
          developerMetadata: list(GoogleApi.Sheets.V4.Model.DeveloperMetadata.t()),
          namedRanges: list(GoogleApi.Sheets.V4.Model.NamedRange.t()),
          properties: GoogleApi.Sheets.V4.Model.SpreadsheetProperties.t(),
          sheets: list(GoogleApi.Sheets.V4.Model.Sheet.t()),
          spreadsheetId: any(),
          spreadsheetUrl: any()
        }

  defstruct [
    :developerMetadata,
    :namedRanges,
    :properties,
    :sheets,
    :spreadsheetId,
    :spreadsheetUrl
  ]
end

defimpl Poison.Decoder, for: GoogleApi.Sheets.V4.Model.Spreadsheet do
  import GoogleApi.Sheets.V4.Deserializer

  def decode(value, options) do
    value
    |> deserialize(
      :developerMetadata,
      :list,
      GoogleApi.Sheets.V4.Model.DeveloperMetadata,
      options
    )
    |> deserialize(:namedRanges, :list, GoogleApi.Sheets.V4.Model.NamedRange, options)
    |> deserialize(:properties, :struct, GoogleApi.Sheets.V4.Model.SpreadsheetProperties, options)
    |> deserialize(:sheets, :list, GoogleApi.Sheets.V4.Model.Sheet, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Sheets.V4.Model.Spreadsheet do
  def encode(value, options) do
    GoogleApi.Sheets.V4.Deserializer.serialize_non_nil(value, options)
  end
end
