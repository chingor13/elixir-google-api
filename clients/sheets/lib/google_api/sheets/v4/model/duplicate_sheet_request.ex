# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Sheets.V4.Model.DuplicateSheetRequest do
  @moduledoc """
  Duplicates the contents of a sheet.

  ## Attributes

  - insertSheetIndex (integer()): The zero-based index where the new sheet should be inserted. The index of all sheets after this are incremented. Defaults to: `null`.
  - newSheetId (integer()): If set, the ID of the new sheet. If not set, an ID is chosen. If set, the ID must not conflict with any existing sheet ID. If set, it must be non-negative. Defaults to: `null`.
  - newSheetName (String.t): The name of the new sheet.  If empty, a new name is chosen for you. Defaults to: `null`.
  - sourceSheetId (integer()): The sheet to duplicate. Defaults to: `null`.
  """

  @type t :: %__MODULE__{
          insertSheetIndex: any(),
          newSheetId: any(),
          newSheetName: any(),
          sourceSheetId: any()
        }

  defstruct [
    :insertSheetIndex,
    :newSheetId,
    :newSheetName,
    :sourceSheetId
  ]
end

defimpl Poison.Decoder, for: GoogleApi.Sheets.V4.Model.DuplicateSheetRequest do
  def decode(value, _options) do
    value
  end
end

defimpl Poison.Encoder, for: GoogleApi.Sheets.V4.Model.DuplicateSheetRequest do
  def encode(value, options) do
    GoogleApi.Sheets.V4.Deserializer.serialize_non_nil(value, options)
  end
end
