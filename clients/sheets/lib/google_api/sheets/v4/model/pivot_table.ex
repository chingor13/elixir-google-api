# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Sheets.V4.Model.PivotTable do
  @moduledoc """
  A pivot table.

  ## Attributes

  - columns ([PivotGroup]): Each column grouping in the pivot table. Defaults to: `null`.
  - criteria (%{optional(String.t) &#x3D;&gt; PivotFilterCriteria}): An optional mapping of filters per source column offset.  The filters will be applied before aggregating data into the pivot table. The map&#39;s key is the column offset of the source range that you want to filter, and the value is the criteria for that column.  For example, if the source was &#x60;C10:E15&#x60;, a key of &#x60;0&#x60; will have the filter for column &#x60;C&#x60;, whereas the key &#x60;1&#x60; is for column &#x60;D&#x60;. Defaults to: `null`.
  - rows ([PivotGroup]): Each row grouping in the pivot table. Defaults to: `null`.
  - source (GridRange): The range the pivot table is reading data from. Defaults to: `null`.
  - valueLayout (String.t): Whether values should be listed horizontally (as columns) or vertically (as rows). Defaults to: `null`.
    - Enum - one of [HORIZONTAL, VERTICAL]
  - values ([PivotValue]): A list of values to include in the pivot table. Defaults to: `null`.
  """

  @type t :: %__MODULE__{
          columns: list(GoogleApi.Sheets.V4.Model.PivotGroup.t()),
          criteria: map(),
          rows: list(GoogleApi.Sheets.V4.Model.PivotGroup.t()),
          source: GoogleApi.Sheets.V4.Model.GridRange.t(),
          valueLayout: any(),
          values: list(GoogleApi.Sheets.V4.Model.PivotValue.t())
        }

  defstruct [
    :columns,
    :criteria,
    :rows,
    :source,
    :valueLayout,
    :values
  ]
end

defimpl Poison.Decoder, for: GoogleApi.Sheets.V4.Model.PivotTable do
  import GoogleApi.Sheets.V4.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:columns, :list, GoogleApi.Sheets.V4.Model.PivotGroup, options)
    |> deserialize(:criteria, :map, GoogleApi.Sheets.V4.Model.PivotFilterCriteria, options)
    |> deserialize(:rows, :list, GoogleApi.Sheets.V4.Model.PivotGroup, options)
    |> deserialize(:source, :struct, GoogleApi.Sheets.V4.Model.GridRange, options)
    |> deserialize(:values, :list, GoogleApi.Sheets.V4.Model.PivotValue, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Sheets.V4.Model.PivotTable do
  def encode(value, options) do
    GoogleApi.Sheets.V4.Deserializer.serialize_non_nil(value, options)
  end
end
