# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Sheets.V4.Model.TreemapChartSpec do
  @moduledoc """
  A &lt;a href&#x3D;\&quot;/chart/interactive/docs/gallery/treemap\&quot;&gt;Treemap chart&lt;/a&gt;.

  ## Attributes

  - colorData (ChartData): The data that determines the background color of each treemap data cell. This field is optional. If not specified, size_data will be used to determine background colors. If specified, the data is expected to be numeric. color_scale will determine how the values in this data map to data cell background colors. Defaults to: `null`.
  - colorScale (TreemapChartColorScale): The color scale for data cells in the treemap chart. Data cells are assigned colors based on their color values. These color values come from color_data, or from size_data if color_data is not specified. Cells with color values less than or equal to min_value will have minValueColor as their background color. Cells with color values greater than or equal to max_value will have maxValueColor as their background color. Cells with color values between min_value and max_value will have background colors on a gradient between minValueColor and maxValueColor, the midpoint of the gradient being midValueColor. Cells with missing or non-numeric color values will have noDataColor as their background color. Defaults to: `null`.
  - headerColor (Color): The background color for header cells. Defaults to: `null`.
  - hideTooltips (boolean()): True to hide tooltips. Defaults to: `null`.
  - hintedLevels (integer()): The number of additional data levels beyond the labeled levels to be shown on the treemap chart. These levels are not interactive and are shown without their labels. Defaults to 0 if not specified. Defaults to: `null`.
  - labels (ChartData): The data that contains the treemap cell labels. Defaults to: `null`.
  - levels (integer()): The number of data levels to show on the treemap chart. These levels are interactive and are shown with their labels. Defaults to 2 if not specified. Defaults to: `null`.
  - maxValue (float()): The maximum possible data value. Cells with values greater than this will have the same color as cells with this value. If not specified, defaults to the actual maximum value from color_data, or the maximum value from size_data if color_data is not specified. Defaults to: `null`.
  - minValue (float()): The minimum possible data value. Cells with values less than this will have the same color as cells with this value. If not specified, defaults to the actual minimum value from color_data, or the minimum value from size_data if color_data is not specified. Defaults to: `null`.
  - parentLabels (ChartData): The data the contains the treemap cells&#39; parent labels. Defaults to: `null`.
  - sizeData (ChartData): The data that determines the size of each treemap data cell. This data is expected to be numeric. The cells corresponding to non-numeric or missing data will not be rendered. If color_data is not specified, this data will be used to determine data cell background colors as well. Defaults to: `null`.
  - textFormat (TextFormat): The text format for all labels on the chart. Defaults to: `null`.
  """

  @type t :: %__MODULE__{
          colorData: GoogleApi.Sheets.V4.Model.ChartData.t(),
          colorScale: GoogleApi.Sheets.V4.Model.TreemapChartColorScale.t(),
          headerColor: GoogleApi.Sheets.V4.Model.Color.t(),
          hideTooltips: any(),
          hintedLevels: any(),
          labels: GoogleApi.Sheets.V4.Model.ChartData.t(),
          levels: any(),
          maxValue: any(),
          minValue: any(),
          parentLabels: GoogleApi.Sheets.V4.Model.ChartData.t(),
          sizeData: GoogleApi.Sheets.V4.Model.ChartData.t(),
          textFormat: GoogleApi.Sheets.V4.Model.TextFormat.t()
        }

  defstruct [
    :colorData,
    :colorScale,
    :headerColor,
    :hideTooltips,
    :hintedLevels,
    :labels,
    :levels,
    :maxValue,
    :minValue,
    :parentLabels,
    :sizeData,
    :textFormat
  ]
end

defimpl Poison.Decoder, for: GoogleApi.Sheets.V4.Model.TreemapChartSpec do
  import GoogleApi.Sheets.V4.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:colorData, :struct, GoogleApi.Sheets.V4.Model.ChartData, options)
    |> deserialize(
      :colorScale,
      :struct,
      GoogleApi.Sheets.V4.Model.TreemapChartColorScale,
      options
    )
    |> deserialize(:headerColor, :struct, GoogleApi.Sheets.V4.Model.Color, options)
    |> deserialize(:labels, :struct, GoogleApi.Sheets.V4.Model.ChartData, options)
    |> deserialize(:parentLabels, :struct, GoogleApi.Sheets.V4.Model.ChartData, options)
    |> deserialize(:sizeData, :struct, GoogleApi.Sheets.V4.Model.ChartData, options)
    |> deserialize(:textFormat, :struct, GoogleApi.Sheets.V4.Model.TextFormat, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Sheets.V4.Model.TreemapChartSpec do
  def encode(value, options) do
    GoogleApi.Sheets.V4.Deserializer.serialize_non_nil(value, options)
  end
end
