# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.Books.V1.Api.Myconfig do
  @moduledoc """
  API calls for all endpoints tagged `Myconfig`.
  """

  alias GoogleApi.Books.V1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Gets the current settings for the user.

  ## Parameters

  - connection (GoogleApi.Books.V1.Connection): Connection to server
  - optional_params (keyword()): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.

  ## Returns

  {:ok, %GoogleApi.Books.V1.Model.Usersettings{}} on success
  {:error, info} on failure
  """
  @spec books_myconfig_get_user_settings(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.Books.V1.Model.Usersettings.t()} | {:error, Tesla.Env.t()}
  def books_myconfig_get_user_settings(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/myconfig/getUserSettings", %{})
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Books.V1.Model.Usersettings{}])
  end

  @doc """
  Release downloaded content access restriction.

  ## Parameters

  - connection (GoogleApi.Books.V1.Connection): Connection to server
  - volume_ids (list(String.t)): The volume(s) to release restrictions for.
  - cpksver (String.t): The device/version ID from which to release the restriction.
  - optional_params (keyword()): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :locale (String.t): ISO-639-1, ISO-3166-1 codes for message localization, i.e. en_US.
    - :source (String.t): String to identify the originator of this request.

  ## Returns

  {:ok, %GoogleApi.Books.V1.Model.DownloadAccesses{}} on success
  {:error, info} on failure
  """
  @spec books_myconfig_release_download_access(
          Tesla.Env.client(),
          list(String.t()),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.Books.V1.Model.DownloadAccesses.t()} | {:error, Tesla.Env.t()}
  def books_myconfig_release_download_access(
        connection,
        volume_ids,
        cpksver,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :locale => :query,
      :source => :query
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/myconfig/releaseDownloadAccess", %{})
      |> Request.add_param(:query, :volumeIds, volume_ids)
      |> Request.add_param(:query, :cpksver, cpksver)
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Books.V1.Model.DownloadAccesses{}])
  end

  @doc """
  Request concurrent and download access restrictions.

  ## Parameters

  - connection (GoogleApi.Books.V1.Connection): Connection to server
  - source (String.t): String to identify the originator of this request.
  - volume_id (String.t): The volume to request concurrent/download restrictions for.
  - nonce (String.t): The client nonce value.
  - cpksver (String.t): The device/version ID from which to request the restrictions.
  - optional_params (keyword()): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :licenseTypes (String.t): The type of access license to request. If not specified, the default is BOTH.
    - :locale (String.t): ISO-639-1, ISO-3166-1 codes for message localization, i.e. en_US.

  ## Returns

  {:ok, %GoogleApi.Books.V1.Model.RequestAccess{}} on success
  {:error, info} on failure
  """
  @spec books_myconfig_request_access(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.Books.V1.Model.RequestAccess.t()} | {:error, Tesla.Env.t()}
  def books_myconfig_request_access(
        connection,
        source,
        volume_id,
        nonce,
        cpksver,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :licenseTypes => :query,
      :locale => :query
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/myconfig/requestAccess", %{})
      |> Request.add_param(:query, :source, source)
      |> Request.add_param(:query, :volumeId, volume_id)
      |> Request.add_param(:query, :nonce, nonce)
      |> Request.add_param(:query, :cpksver, cpksver)
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Books.V1.Model.RequestAccess{}])
  end

  @doc """
  Request downloaded content access for specified volumes on the My eBooks shelf.

  ## Parameters

  - connection (GoogleApi.Books.V1.Connection): Connection to server
  - source (String.t): String to identify the originator of this request.
  - nonce (String.t): The client nonce value.
  - cpksver (String.t): The device/version ID from which to release the restriction.
  - optional_params (keyword()): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :features (list(String.t)): List of features supported by the client, i.e., 'RENTALS'
    - :includeNonComicsSeries (boolean()): Set to true to include non-comics series. Defaults to false.
    - :locale (String.t): ISO-639-1, ISO-3166-1 codes for message localization, i.e. en_US.
    - :showPreorders (boolean()): Set to true to show pre-ordered books. Defaults to false.
    - :volumeIds (list(String.t)): The volume(s) to request download restrictions for.

  ## Returns

  {:ok, %GoogleApi.Books.V1.Model.Volumes{}} on success
  {:error, info} on failure
  """
  @spec books_myconfig_sync_volume_licenses(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.Books.V1.Model.Volumes.t()} | {:error, Tesla.Env.t()}
  def books_myconfig_sync_volume_licenses(
        connection,
        source,
        nonce,
        cpksver,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :features => :query,
      :includeNonComicsSeries => :query,
      :locale => :query,
      :showPreorders => :query,
      :volumeIds => :query
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/myconfig/syncVolumeLicenses", %{})
      |> Request.add_param(:query, :source, source)
      |> Request.add_param(:query, :nonce, nonce)
      |> Request.add_param(:query, :cpksver, cpksver)
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Books.V1.Model.Volumes{}])
  end

  @doc """
  Sets the settings for the user. If a sub-object is specified, it will overwrite the existing sub-object stored in the server. Unspecified sub-objects will retain the existing value.

  ## Parameters

  - connection (GoogleApi.Books.V1.Connection): Connection to server
  - optional_params (keyword()): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (GoogleApi.Books.V1.Model.Usersettings.t): 

  ## Returns

  {:ok, %GoogleApi.Books.V1.Model.Usersettings{}} on success
  {:error, info} on failure
  """
  @spec books_myconfig_update_user_settings(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.Books.V1.Model.Usersettings.t()} | {:error, Tesla.Env.t()}
  def books_myconfig_update_user_settings(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/myconfig/updateUserSettings", %{})
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Books.V1.Model.Usersettings{}])
  end
end
