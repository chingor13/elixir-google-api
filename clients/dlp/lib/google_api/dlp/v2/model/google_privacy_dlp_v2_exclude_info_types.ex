# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2ExcludeInfoTypes do
  @moduledoc """
  List of exclude infoTypes.

  ## Attributes

  - infoTypes (list(GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InfoType.t)): InfoType list in ExclusionRule rule drops a finding when it overlaps or
  contained within with a finding of an infoType from this list. For
  example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"` and
  `exclusion_rule` containing `exclude_info_types.info_types` with
  "EMAIL_ADDRESS" the phone number findings are dropped if they overlap
  with EMAIL_ADDRESS finding.
  That leads to "555-222-2222@example.org" to generate only a single
  finding, namely email address. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :infoTypes => list(GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InfoType.t())
        }

  field(:infoTypes, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InfoType, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2ExcludeInfoTypes do
  def decode(value, options) do
    GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2ExcludeInfoTypes.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2ExcludeInfoTypes do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
