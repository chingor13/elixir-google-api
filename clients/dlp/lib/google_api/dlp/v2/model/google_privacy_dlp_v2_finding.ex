# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Finding do
  @moduledoc """
  Represents a piece of potentially sensitive content.

  ## Attributes

  - createTime (DateTime.t): Timestamp when finding was detected. Defaults to `nil`.
  - infoType (GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InfoType.t): The type of content that might have been found.
  Provided if `excluded_types` is false. Defaults to `nil`.
  - likelihood (String.t): Confidence of how likely it is that the `info_type` is correct. Defaults to `nil`.
  - location (GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Location.t): Where the content was found. Defaults to `nil`.
  - quote (String.t): The content that was found. Even if the content is not textual, it
  may be converted to a textual representation here.
  Provided if `include_quote` is true and the finding is
  less than or equal to 4096 bytes long. If the finding exceeds 4096 bytes
  in length, the quote may be omitted. Defaults to `nil`.
  - quoteInfo (GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2QuoteInfo.t): Contains data parsed from quotes. Only populated if include_quote was set
  to true and a supported infoType was requested. Currently supported
  infoTypes: DATE, DATE_OF_BIRTH and TIME. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :createTime => DateTime.t(),
          :infoType => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InfoType.t(),
          :likelihood => String.t(),
          :location => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Location.t(),
          :quote => String.t(),
          :quoteInfo => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2QuoteInfo.t()
        }

  field(:createTime, as: DateTime)
  field(:infoType, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InfoType)
  field(:likelihood)
  field(:location, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Location)
  field(:quote)
  field(:quoteInfo, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2QuoteInfo)
end

defimpl Poison.Decoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Finding do
  def decode(value, options) do
    GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Finding.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Finding do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
