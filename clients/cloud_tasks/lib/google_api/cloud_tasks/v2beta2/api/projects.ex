# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CloudTasks.V2beta2.Api.Projects do
  @moduledoc """
  API calls for all endpoints tagged `Projects`.
  """

  alias GoogleApi.CloudTasks.V2beta2.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Lists information about the supported locations for this service.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - name (String.t): The resource that owns the locations collection, if applicable.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :filter (String.t): The standard list filter.
    - :pageToken (String.t): The standard list page token.
    - :pageSize (integer()): The standard list page size.

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.ListLocationsResponse{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.ListLocationsResponse.t()}
          | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_list(connection, name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :filter => :query,
      :pageToken => :query,
      :pageSize => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta2/{+name}/locations", %{
        "name" => URI.encode_www_form(name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.ListLocationsResponse{})
  end

  @doc """
  Creates a queue.  Queues created with this method allow tasks to live for a maximum of 31 days. After a task is 31 days old, the task will be deleted regardless of whether it was dispatched or not.  WARNING: Using this method may have unintended side effects if you are using an App Engine &#x60;queue.yaml&#x60; or &#x60;queue.xml&#x60; file to manage your queues. Read [Overview of Queue Management and queue.yaml](/cloud-tasks/docs/queue-yaml) before using this method.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - parent (String.t): Required.  The location name in which the queue will be created. For example: &#x60;projects/PROJECT_ID/locations/LOCATION_ID&#x60;  The list of allowed locations can be obtained by calling Cloud Tasks&#39; implementation of ListLocations.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (Queue): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Queue{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.Queue.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_create(connection, parent, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+parent}/queues", %{
        "parent" => URI.encode_www_form(parent)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Queue{})
  end

  @doc """
  Gets the access control policy for a Queue. Returns an empty policy if the resource exists and does not have a policy set.  Authorization requires the following [Google IAM](/iam) permission on the specified resource parent:  * &#x60;cloudtasks.queues.getIamPolicy&#x60;

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - resource (String.t): REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (GetIamPolicyRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_get_iam_policy(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudTasks.V2beta2.Model.Policy.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_get_iam_policy(connection, resource, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+resource}:getIamPolicy", %{
        "resource" => URI.encode_www_form(resource)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Policy{})
  end

  @doc """
  Lists queues.  Queues are returned in lexicographical order.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - parent (String.t): Required.  The location name. For example: &#x60;projects/PROJECT_ID/locations/LOCATION_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :pageSize (integer()): Requested page size.  The maximum page size is 9800. If unspecified, the page size will be the maximum. Fewer queues than requested might be returned, even if more queues exist; use the next_page_token in the response to determine if more queues exist.
    - :filter (String.t): &#x60;filter&#x60; can be used to specify a subset of queues. Any Queue field can be used as a filter and several operators as supported. For example: &#x60;&lt;&#x3D;, &lt;, &gt;&#x3D;, &gt;, !&#x3D;, &#x3D;, :&#x60;. The filter syntax is the same as described in [Stackdriver&#39;s Advanced Logs Filters](/logging/docs/view/advanced_filters).  Sample filter \&quot;app_engine_http_target: *\&quot;.  Note that using filters might cause fewer queues than the requested_page size to be returned.
    - :pageToken (String.t): A token identifying the page of results to return.  To request the first page results, page_token must be empty. To request the next page of results, page_token must be the value of next_page_token returned from the previous call to ListQueues method. It is an error to switch the value of the filter while iterating through pages.

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.ListQueuesResponse{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.ListQueuesResponse.t()}
          | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_list(connection, parent, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :pageSize => :query,
      :filter => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta2/{+parent}/queues", %{
        "parent" => URI.encode_www_form(parent)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.ListQueuesResponse{})
  end

  @doc """
  Updates a queue.  This method creates the queue if it does not exist and updates the queue if it does exist.  Queues created with this method allow tasks to live for a maximum of 31 days. After a task is 31 days old, the task will be deleted regardless of whether it was dispatched or not.  WARNING: Using this method may have unintended side effects if you are using an App Engine &#x60;queue.yaml&#x60; or &#x60;queue.xml&#x60; file to manage your queues. Read [Overview of Queue Management and queue.yaml](/cloud-tasks/docs/queue-yaml) before using this method.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - name (String.t): Caller-specified and required in CreateQueue, after which it becomes output only.  The queue name.  The queue name must have the following format: &#x60;projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID&#x60;  * &#x60;PROJECT_ID&#x60; can contain letters ([A-Za-z]), numbers ([0-9]),    hyphens (-), colons (:), or periods (.).    For more information, see    [Identifying projects](/resource-manager/docs/creating-managing-projects#identifying_projects) * &#x60;LOCATION_ID&#x60; is the canonical ID for the queue&#39;s location.    The list of available locations can be obtained by calling    ListLocations.    For more information, see https://cloud.google.com/about/locations/. * &#x60;QUEUE_ID&#x60; can contain letters ([A-Za-z]), numbers ([0-9]), or   hyphens (-). The maximum length is 100 characters.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :updateMask (String.t): A mask used to specify which fields of the queue are being updated.  If empty, then all fields will be updated.
    - :body (Queue): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Queue{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_patch(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.Queue.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_patch(connection, name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v2beta2/{+name}", %{
        "name" => URI.encode_www_form(name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Queue{})
  end

  @doc """
  Pauses the queue.  If a queue is paused then the system will stop dispatching tasks until the queue is resumed via ResumeQueue. Tasks can still be added when the queue is paused. A queue is paused if its state is PAUSED.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - name (String.t): Required.  The queue name. For example: &#x60;projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (PauseQueueRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Queue{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_pause(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.Queue.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_pause(connection, name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+name}:pause", %{
        "name" => URI.encode_www_form(name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Queue{})
  end

  @doc """
  Purges a queue by deleting all of its tasks.  All tasks created before this method is called are permanently deleted.  Purge operations can take up to one minute to take effect. Tasks might be dispatched before the purge takes effect. A purge is irreversible.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - name (String.t): Required.  The queue name. For example: &#x60;projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (PurgeQueueRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Queue{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_purge(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.Queue.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_purge(connection, name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+name}:purge", %{
        "name" => URI.encode_www_form(name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Queue{})
  end

  @doc """
  Resume a queue.  This method resumes a queue after it has been PAUSED or DISABLED. The state of a queue is stored in the queue&#39;s state; after calling this method it will be set to RUNNING.  WARNING: Resuming many high-QPS queues at the same time can lead to target overloading. If you are resuming high-QPS queues, follow the 500/50/5 pattern described in [Managing Cloud Tasks Scaling Risks](/cloud-tasks/pdfs/managing-cloud-tasks-scaling-risks-2017-06-05.pdf).

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - name (String.t): Required.  The queue name. For example: &#x60;projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (ResumeQueueRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Queue{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_resume(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.Queue.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_resume(connection, name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+name}:resume", %{
        "name" => URI.encode_www_form(name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Queue{})
  end

  @doc """
  Sets the access control policy for a Queue. Replaces any existing policy.  Note: The Cloud Console does not check queue-level IAM permissions yet. Project-level permissions are required to use the Cloud Console.  Authorization requires the following [Google IAM](/iam) permission on the specified resource parent:  * &#x60;cloudtasks.queues.setIamPolicy&#x60;

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - resource (String.t): REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (SetIamPolicyRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_set_iam_policy(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudTasks.V2beta2.Model.Policy.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_set_iam_policy(connection, resource, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+resource}:setIamPolicy", %{
        "resource" => URI.encode_www_form(resource)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Policy{})
  end

  @doc """
  Acknowledges a pull task.  The worker, that is, the entity that leased this task must call this method to indicate that the work associated with the task has finished.  The worker must acknowledge a task within the lease_duration or the lease will expire and the task will become available to be leased again. After the task is acknowledged, it will not be returned by a later LeaseTasks, GetTask, or ListTasks.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - name (String.t): Required.  The task name. For example: &#x60;projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (AcknowledgeTaskRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_tasks_acknowledge(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudTasks.V2beta2.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_tasks_acknowledge(connection, name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+name}:acknowledge", %{
        "name" => URI.encode_www_form(name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Empty{})
  end

  @doc """
  Cancel a pull task&#39;s lease.  The worker can use this method to cancel a task&#39;s lease by setting its schedule_time to now. This will make the task available to be leased to the next caller of LeaseTasks.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - name (String.t): Required.  The task name. For example: &#x60;projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (CancelLeaseRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Task{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_tasks_cancel_lease(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudTasks.V2beta2.Model.Task.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_tasks_cancel_lease(connection, name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+name}:cancelLease", %{
        "name" => URI.encode_www_form(name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Task{})
  end

  @doc """
  Creates a task and adds it to a queue.  Tasks cannot be updated after creation; there is no UpdateTask command.  * For [App Engine queues](google.cloud.tasks.v2beta2.AppEngineHttpTarget),   the maximum task size is 100KB. * For [pull queues](google.cloud.tasks.v2beta2.PullTarget), this   the maximum task size is 1MB.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - parent (String.t): Required.  The queue name. For example: &#x60;projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID&#x60;  The queue must already exist.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (CreateTaskRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Task{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_tasks_create(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudTasks.V2beta2.Model.Task.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_tasks_create(connection, parent, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+parent}/tasks", %{
        "parent" => URI.encode_www_form(parent)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Task{})
  end

  @doc """
  Deletes a task.  A task can be deleted if it is scheduled or dispatched. A task cannot be deleted if it has completed successfully or permanently failed.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - name (String.t): Required.  The task name. For example: &#x60;projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_tasks_delete(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudTasks.V2beta2.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_tasks_delete(connection, name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v2beta2/{+name}", %{
        "name" => URI.encode_www_form(name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Empty{})
  end

  @doc """
  Gets a task.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - name (String.t): Required.  The task name. For example: &#x60;projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :responseView (String.t): The response_view specifies which subset of the Task will be returned.  By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains.  Authorization for FULL requires &#x60;cloudtasks.tasks.fullView&#x60; [Google IAM](/iam/) permission on the Task resource.

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Task{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_tasks_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.Task.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_tasks_get(connection, name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :responseView => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta2/{+name}", %{
        "name" => URI.encode_www_form(name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Task{})
  end

  @doc """
  Leases tasks from a pull queue for lease_duration.  This method is invoked by the worker to obtain a lease. The worker must acknowledge the task via AcknowledgeTask after they have performed the work associated with the task.  The payload is intended to store data that the worker needs to perform the work associated with the task. To return the payloads in the response, set response_view to FULL.  A maximum of 10 qps of LeaseTasks requests are allowed per queue. RESOURCE_EXHAUSTED is returned when this limit is exceeded. RESOURCE_EXHAUSTED is also returned when max_tasks_dispatched_per_second is exceeded.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - parent (String.t): Required.  The queue name. For example: &#x60;projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (LeaseTasksRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.LeaseTasksResponse{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_tasks_lease(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.LeaseTasksResponse.t()}
          | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_tasks_lease(connection, parent, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+parent}/tasks:lease", %{
        "parent" => URI.encode_www_form(parent)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.LeaseTasksResponse{})
  end

  @doc """
  Lists the tasks in a queue.  By default, only the BASIC view is retrieved due to performance considerations; response_view controls the subset of information which is returned.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - parent (String.t): Required.  The queue name. For example: &#x60;projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :responseView (String.t): The response_view specifies which subset of the Task will be returned.  By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains.  Authorization for FULL requires &#x60;cloudtasks.tasks.fullView&#x60; [Google IAM](/iam/) permission on the Task resource.
    - :pageToken (String.t): A token identifying the page of results to return.  To request the first page results, page_token must be empty. To request the next page of results, page_token must be the value of next_page_token returned from the previous call to ListTasks method.  The page token is valid for only 2 hours.
    - :pageSize (integer()): Requested page size. Fewer tasks than requested might be returned.  The maximum page size is 1000. If unspecified, the page size will be the maximum. Fewer tasks than requested might be returned, even if more tasks exist; use next_page_token in the response to determine if more tasks exist.

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.ListTasksResponse{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_tasks_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.ListTasksResponse.t()}
          | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_tasks_list(connection, parent, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :responseView => :query,
      :pageToken => :query,
      :pageSize => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta2/{+parent}/tasks", %{
        "parent" => URI.encode_www_form(parent)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.ListTasksResponse{})
  end

  @doc """
  Renew the current lease of a pull task.  The worker can use this method to extend the lease by a new duration, starting from now. The new task lease will be returned in the task&#39;s schedule_time.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - name (String.t): Required.  The task name. For example: &#x60;projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (RenewLeaseRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Task{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_tasks_renew_lease(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudTasks.V2beta2.Model.Task.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_tasks_renew_lease(connection, name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+name}:renewLease", %{
        "name" => URI.encode_www_form(name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Task{})
  end

  @doc """
  Forces a task to run now.  When this method is called, Cloud Tasks will dispatch the task, even if the task is already running, the queue has reached its RateLimits or is PAUSED.  This command is meant to be used for manual debugging. For example, RunTask can be used to retry a failed task after a fix has been made or to manually force a task to be dispatched now.  The dispatched task is returned. That is, the task that is returned contains the status after the task is dispatched but before the task is received by its target.  If Cloud Tasks receives a successful response from the task&#39;s target, then the task will be deleted; otherwise the task&#39;s schedule_time will be reset to the time that RunTask was called plus the retry delay specified in the queue&#39;s RetryConfig.  RunTask returns NOT_FOUND when it is called on a task that has already succeeded or permanently failed.  RunTask cannot be called on a pull task.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - name (String.t): Required.  The task name. For example: &#x60;projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (RunTaskRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.Task{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_tasks_run(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.Task.t()} | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_tasks_run(connection, name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+name}:run", %{
        "name" => URI.encode_www_form(name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.Task{})
  end

  @doc """
  Returns permissions that a caller has on a Queue. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.

  ## Parameters

  - connection (GoogleApi.CloudTasks.V2beta2.Connection): Connection to server
  - resource (String.t): REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (TestIamPermissionsRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudTasks.V2beta2.Model.TestIamPermissionsResponse{}} on success
  {:error, info} on failure
  """
  @spec cloudtasks_projects_locations_queues_test_iam_permissions(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudTasks.V2beta2.Model.TestIamPermissionsResponse.t()}
          | {:error, Tesla.Env.t()}
  def cloudtasks_projects_locations_queues_test_iam_permissions(connection, resource, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta2/{+resource}:testIamPermissions", %{
        "resource" => URI.encode_www_form(resource)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudTasks.V2beta2.Model.TestIamPermissionsResponse{})
  end
end
